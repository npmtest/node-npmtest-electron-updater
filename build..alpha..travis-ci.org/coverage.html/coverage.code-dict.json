{"/home/travis/build/npmtest/node-npmtest-electron-updater/test.js":"/* istanbul instrument in package npmtest_electron_updater */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-updater/lib.npmtest_electron_updater.js":"/* istanbul instrument in package npmtest_electron_updater */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_electron_updater = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_electron_updater = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-updater/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-electron-updater && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_electron_updater */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_electron_updater\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_electron_updater.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_electron_updater.rollup.js'] =\n            local.assetsDict['/assets.npmtest_electron_updater.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_electron_updater.__dirname + '/lib.npmtest_electron_updater.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-updater/node_modules/electron-updater/out/main.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nlet impl;\nif (process.platform === \"win32\") {\n    impl = new (require(\"./NsisUpdater\").NsisUpdater)();\n} else if (process.platform === \"darwin\") {\n    impl = new (require(\"./MacUpdater\").MacUpdater)();\n} else {\n    impl = require(\"electron\").autoUpdater;\n}\nconst autoUpdater = exports.autoUpdater = impl;\n//# sourceMappingURL=main.js.map","/home/travis/build/npmtest/node-npmtest-electron-updater/node_modules/electron-updater/out/api.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.UpdaterSignal = exports.DOWNLOAD_PROGRESS = exports.Provider = undefined;\nexports.getDefaultChannelName = getDefaultChannelName;\nexports.getCustomChannelName = getCustomChannelName;\nexports.getCurrentPlatform = getCurrentPlatform;\nexports.getChannelFilename = getChannelFilename;\nexports.formatUrl = formatUrl;\n\nvar _url;\n\nfunction _load_url() {\n    return _url = require(\"url\");\n}\n\nclass Provider {\n    setRequestHeaders(value) {\n        this.requestHeaders = value;\n    }\n}\nexports.Provider = Provider; // due to historical reasons for windows we use channel name without platform specifier\n\nfunction getDefaultChannelName() {\n    return `latest${getChannelFilePrefix()}`;\n}\nfunction getChannelFilePrefix() {\n    return getCurrentPlatform() === \"darwin\" ? \"-mac\" : \"\";\n}\nfunction getCustomChannelName(channel) {\n    return `${channel}${getChannelFilePrefix()}`;\n}\nfunction getCurrentPlatform() {\n    return process.env.TEST_UPDATER_PLATFORM || process.platform;\n}\nfunction getChannelFilename(channel) {\n    return `${channel}.${getCurrentPlatform() === \"darwin\" ? \"json\" : \"yml\"}`;\n}\nconst DOWNLOAD_PROGRESS = exports.DOWNLOAD_PROGRESS = \"download-progress\";\nclass UpdaterSignal {\n    constructor(emitter) {\n        this.emitter = emitter;\n    }\n    progress(handler) {\n        addHandler(this.emitter, DOWNLOAD_PROGRESS, handler);\n    }\n    updateDownloaded(handler) {\n        addHandler(this.emitter, \"update-downloaded\", handler);\n    }\n    updateCancelled(handler) {\n        addHandler(this.emitter, \"update-cancelled\", handler);\n    }\n}\nexports.UpdaterSignal = UpdaterSignal;\nconst isLogEvent = false;\nfunction addHandler(emitter, event, handler) {\n    if (isLogEvent) {\n        emitter.on(event, function () {\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n            }\n\n            console.log(\"%s %s\", event, args);\n            handler.apply(null, args);\n        });\n    } else {\n        emitter.on(event, handler);\n    }\n}\n// url.format doesn't correctly use path and requires explicit pathname\nfunction formatUrl(url) {\n    if (url.path != null && url.pathname == null) {\n        url.pathname = url.path;\n    }\n    return (0, (_url || _load_url()).format)(url);\n}\n//# sourceMappingURL=api.js.map","/home/travis/build/npmtest/node-npmtest-electron-updater/node_modules/electron-updater/out/AppUpdater.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.AppUpdater = undefined;\n\nvar _bluebirdLst;\n\nfunction _load_bluebirdLst() {\n    return _bluebirdLst = require(\"bluebird-lst\");\n}\n\nvar _bluebirdLst2;\n\nfunction _load_bluebirdLst2() {\n    return _bluebirdLst2 = _interopRequireDefault(require(\"bluebird-lst\"));\n}\n\nvar _electronBuilderHttp;\n\nfunction _load_electronBuilderHttp() {\n    return _electronBuilderHttp = require(\"electron-builder-http\");\n}\n\nvar _CancellationToken;\n\nfunction _load_CancellationToken() {\n    return _CancellationToken = require(\"electron-builder-http/out/CancellationToken\");\n}\n\nvar _publishOptions;\n\nfunction _load_publishOptions() {\n    return _publishOptions = require(\"electron-builder-http/out/publishOptions\");\n}\n\nvar _events;\n\nfunction _load_events() {\n    return _events = require(\"events\");\n}\n\nvar _fsExtraP;\n\nfunction _load_fsExtraP() {\n    return _fsExtraP = require(\"fs-extra-p\");\n}\n\nvar _jsYaml;\n\nfunction _load_jsYaml() {\n    return _jsYaml = require(\"js-yaml\");\n}\n\nvar _path = _interopRequireWildcard(require(\"path\"));\n\nvar _semver;\n\nfunction _load_semver() {\n    return _semver = require(\"semver\");\n}\n\nrequire(\"source-map-support/register\");\n\nvar _api;\n\nfunction _load_api() {\n    return _api = require(\"./api\");\n}\n\nvar _BintrayProvider;\n\nfunction _load_BintrayProvider() {\n    return _BintrayProvider = require(\"./BintrayProvider\");\n}\n\nvar _electronHttpExecutor;\n\nfunction _load_electronHttpExecutor() {\n    return _electronHttpExecutor = require(\"./electronHttpExecutor\");\n}\n\nvar _GenericProvider;\n\nfunction _load_GenericProvider() {\n    return _GenericProvider = require(\"./GenericProvider\");\n}\n\nvar _GitHubProvider;\n\nfunction _load_GitHubProvider() {\n    return _GitHubProvider = require(\"./GitHubProvider\");\n}\n\nvar _PrivateGitHubProvider;\n\nfunction _load_PrivateGitHubProvider() {\n    return _PrivateGitHubProvider = require(\"./PrivateGitHubProvider\");\n}\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass AppUpdater extends (_events || _load_events()).EventEmitter {\n    constructor(options, app) {\n        super();\n        /**\n         * Whether to automatically download an update when it is found.\n         */\n        this.autoDownload = true;\n        /**\n         * *GitHub provider only.* Whether to allow update to pre-release versions. Defaults to `true` if application version contains prerelease components (e.g. `0.12.1-alpha.1`, here `alpha` is a prerelease component), otherwise `false`.\n         *\n         * If `true`, downgrade will be allowed (`allowDowngrade` will be set to `true`).\n         */\n        this.allowPrerelease = false;\n        /**\n         * Whether to allow version downgrade (when a user from the beta channel wants to go back to the stable channel).\n         * Defaults to `true` if application version contains prerelease components (e.g. `0.12.1-alpha.1`, here `alpha` is a prerelease component), otherwise `false`.\n         */\n        this.allowDowngrade = false;\n        /**\n         * The logger. You can pass [electron-log](https://github.com/megahertz/electron-log), [winston](https://github.com/winstonjs/winston) or another logger with the following interface: `{ info(), warn(), error() }`.\n         * Set it to `null` if you would like to disable a logging feature.\n         */\n        this.logger = global.__test_app ? null : console;\n        /**\n         * For type safety you can use signals, e.g. `autoUpdater.signals.updateDownloaded(() => {})` instead of `autoUpdater.on('update-available', () => {})`\n         */\n        this.signals = new (_api || _load_api()).UpdaterSignal(this);\n        this.updateAvailable = false;\n        this.on(\"error\", error => {\n            if (this.logger != null) {\n                this.logger.error(`Error: ${error.stack || error.message}`);\n            }\n        });\n        if (app != null || global.__test_app != null) {\n            this.app = app || global.__test_app;\n            this.untilAppReady = (_bluebirdLst2 || _load_bluebirdLst2()).default.resolve();\n        } else {\n            this.app = require(\"electron\").app;\n            (_electronBuilderHttp || _load_electronBuilderHttp()).executorHolder.httpExecutor = new (_electronHttpExecutor || _load_electronHttpExecutor()).ElectronHttpExecutor();\n            this.untilAppReady = new (_bluebirdLst2 || _load_bluebirdLst2()).default(resolve => {\n                if (this.app.isReady()) {\n                    if (this.logger != null) {\n                        this.logger.info(\"App is ready\");\n                    }\n                    resolve();\n                } else {\n                    if (this.logger != null) {\n                        this.logger.info(\"Wait for app ready\");\n                    }\n                    this.app.on(\"ready\", resolve);\n                }\n            });\n        }\n        const currentVersionString = this.app.getVersion();\n        this.currentVersion = (0, (_semver || _load_semver()).valid)(currentVersionString);\n        if (this.currentVersion == null) {\n            throw new Error(`App version is not valid semver version: \"${currentVersionString}`);\n        }\n        const versionPrereleaseComponent = (0, (_semver || _load_semver()).prerelease)(this.currentVersion);\n        this.allowDowngrade = versionPrereleaseComponent != null && versionPrereleaseComponent.length > 0;\n        this.allowPrerelease = this.allowDowngrade;\n        if (options != null) {\n            this.setFeedURL(options);\n        }\n    }\n    set updateConfigPath(value) {\n        this.clientPromise = null;\n        this._appUpdateConfigPath = value;\n    }\n    //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\n    getFeedURL() {\n        return \"Deprecated. Do not use it.\";\n    }\n    /**\n     * Configure update provider. If value is `string`, {@link module:electron-builder-http/out/publishOptions.GenericServerOptions} will be set with value as `url`.\n     * @param options If you want to override configuration in the `app-update.yml`.\n     */\n    setFeedURL(options) {\n        // https://github.com/electron-userland/electron-builder/issues/1105\n        let client;\n        if (typeof options === \"string\") {\n            client = new (_GenericProvider || _load_GenericProvider()).GenericProvider({ provider: \"generic\", url: options });\n        } else {\n            client = this.createClient(options);\n        }\n        this.clientPromise = (_bluebirdLst2 || _load_bluebirdLst2()).default.resolve(client);\n    }\n    /**\n     * Asks the server whether there is an update.\n     */\n    checkForUpdates() {\n        let checkForUpdatesPromise = this.checkForUpdatesPromise;\n        if (checkForUpdatesPromise != null) {\n            return checkForUpdatesPromise;\n        }\n        checkForUpdatesPromise = this._checkForUpdates();\n        this.checkForUpdatesPromise = checkForUpdatesPromise;\n        const nullizePromise = () => this.checkForUpdatesPromise = null;\n        checkForUpdatesPromise.then(nullizePromise).catch(nullizePromise);\n        return checkForUpdatesPromise;\n    }\n    _checkForUpdates() {\n        var _this = this;\n\n        return (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* () {\n            try {\n                yield _this.untilAppReady;\n                if (_this.logger != null) {\n                    _this.logger.info(\"Checking for update\");\n                }\n                _this.emit(\"checking-for-update\");\n                return yield _this.doCheckForUpdates();\n            } catch (e) {\n                _this.emit(\"error\", e, `Cannot check for updates: ${(e.stack || e).toString()}`);\n                throw e;\n            }\n        })();\n    }\n    doCheckForUpdates() {\n        var _this2 = this;\n\n        return (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* () {\n            if (_this2.clientPromise == null) {\n                _this2.clientPromise = _this2.loadUpdateConfig().then(function (it) {\n                    return _this2.createClient(it);\n                });\n            }\n            const client = yield _this2.clientPromise;\n            client.setRequestHeaders(_this2.requestHeaders);\n            const versionInfo = yield client.getLatestVersion();\n            const latestVersion = (0, (_semver || _load_semver()).valid)(versionInfo.version);\n            if (latestVersion == null) {\n                throw new Error(`Latest version (from update server) is not valid semver version: \"${latestVersion}`);\n            }\n            if (_this2.allowDowngrade ? (0, (_semver || _load_semver()).eq)(latestVersion, _this2.currentVersion) : !(0, (_semver || _load_semver()).gt)(latestVersion, _this2.currentVersion)) {\n                _this2.updateAvailable = false;\n                if (_this2.logger != null) {\n                    _this2.logger.info(`Update for version ${_this2.currentVersion} is not available (latest version: ${versionInfo.version}, downgrade is ${_this2.allowDowngrade ? \"allowed\" : \"disallowed\"}.`);\n                }\n                _this2.emit(\"update-not-available\", versionInfo);\n                return {\n                    versionInfo: versionInfo\n                };\n            }\n            const fileInfo = yield client.getUpdateFile(versionInfo);\n            _this2.updateAvailable = true;\n            _this2.versionInfo = versionInfo;\n            _this2.fileInfo = fileInfo;\n            _this2.onUpdateAvailable(versionInfo, fileInfo);\n            const cancellationToken = new (_CancellationToken || _load_CancellationToken()).CancellationToken();\n            //noinspection ES6MissingAwait\n            return {\n                versionInfo: versionInfo,\n                fileInfo: fileInfo,\n                cancellationToken: cancellationToken,\n                downloadPromise: _this2.autoDownload ? _this2.downloadUpdate(cancellationToken) : null\n            };\n        })();\n    }\n    onUpdateAvailable(versionInfo, fileInfo) {\n        if (this.logger != null) {\n            this.logger.info(`Found version ${versionInfo.version} (url: ${fileInfo.url})`);\n        }\n        this.emit(\"update-available\", versionInfo);\n    }\n    /**\n     * Start downloading update manually. You can use this method if `autoDownload` option is set to `false`.\n     * @returns {Promise<string>} Path to downloaded file.\n     */\n    downloadUpdate() {\n        var _this3 = this;\n\n        let cancellationToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new (_CancellationToken || _load_CancellationToken()).CancellationToken();\n        return (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* () {\n            const versionInfo = _this3.versionInfo;\n            const fileInfo = _this3.fileInfo;\n            if (versionInfo == null || fileInfo == null) {\n                const message = \"Please check update first\";\n                const error = new Error(message);\n                _this3.emit(\"error\", error, message);\n                throw error;\n            }\n            if (_this3.logger != null) {\n                _this3.logger.info(`Downloading update from ${fileInfo.url}`);\n            }\n            try {\n                return yield _this3.doDownloadUpdate(versionInfo, fileInfo, cancellationToken);\n            } catch (e) {\n                _this3.dispatchError(e);\n                throw e;\n            }\n        })();\n    }\n    dispatchError(e) {\n        this.emit(\"error\", e, (e.stack || e).toString());\n    }\n    loadUpdateConfig() {\n        var _this4 = this;\n\n        return (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* () {\n            if (_this4._appUpdateConfigPath == null) {\n                _this4._appUpdateConfigPath = require(\"electron-is-dev\") ? _path.join(_this4.app.getAppPath(), \"dev-app-update.yml\") : _path.join(process.resourcesPath, \"app-update.yml\");\n            }\n            return (0, (_jsYaml || _load_jsYaml()).safeLoad)((yield (0, (_fsExtraP || _load_fsExtraP()).readFile)(_this4._appUpdateConfigPath, \"utf-8\")));\n        })();\n    }\n    computeRequestHeaders(fileInfo) {\n        let requestHeaders = this.requestHeaders;\n        if (fileInfo.headers != null) {\n            return requestHeaders == null ? fileInfo.headers : Object.assign({}, fileInfo.headers, requestHeaders);\n        }\n        return requestHeaders;\n    }\n    createClient(data) {\n        if (typeof data === \"string\") {\n            throw new Error(\"Please pass PublishConfiguration object\");\n        }\n        const provider = data.provider;\n        switch (provider) {\n            case \"github\":\n                const githubOptions = data;\n                const token = (githubOptions.private ? process.env.GH_TOKEN : null) || githubOptions.token;\n                if (token == null) {\n                    return new (_GitHubProvider || _load_GitHubProvider()).GitHubProvider(githubOptions, this);\n                } else {\n                    return new (_PrivateGitHubProvider || _load_PrivateGitHubProvider()).PrivateGitHubProvider(githubOptions, token);\n                }\n            case \"s3\":\n                {\n                    const s3 = data;\n                    return new (_GenericProvider || _load_GenericProvider()).GenericProvider({\n                        provider: \"generic\",\n                        url: (0, (_publishOptions || _load_publishOptions()).s3Url)(s3),\n                        channel: s3.channel || \"\"\n                    });\n                }\n            case \"generic\":\n                return new (_GenericProvider || _load_GenericProvider()).GenericProvider(data);\n            case \"bintray\":\n                return new (_BintrayProvider || _load_BintrayProvider()).BintrayProvider(data);\n            default:\n                throw new Error(`Unsupported provider: ${provider}`);\n        }\n    }\n}\nexports.AppUpdater = AppUpdater; //# sourceMappingURL=AppUpdater.js.map","/home/travis/build/npmtest/node-npmtest-electron-updater/node_modules/electron-updater/out/BintrayProvider.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.BintrayProvider = undefined;\n\nvar _bluebirdLst;\n\nfunction _load_bluebirdLst() {\n    return _bluebirdLst = require(\"bluebird-lst\");\n}\n\nvar _electronBuilderHttp;\n\nfunction _load_electronBuilderHttp() {\n    return _electronBuilderHttp = require(\"electron-builder-http\");\n}\n\nvar _bintray;\n\nfunction _load_bintray() {\n    return _bintray = require(\"electron-builder-http/out/bintray\");\n}\n\nvar _CancellationToken;\n\nfunction _load_CancellationToken() {\n    return _CancellationToken = require(\"electron-builder-http/out/CancellationToken\");\n}\n\nvar _api;\n\nfunction _load_api() {\n    return _api = require(\"./api\");\n}\n\nclass BintrayProvider extends (_api || _load_api()).Provider {\n    constructor(configuration) {\n        super();\n        this.client = new (_bintray || _load_bintray()).BintrayClient(configuration, new (_CancellationToken || _load_CancellationToken()).CancellationToken());\n    }\n    getLatestVersion() {\n        var _this = this;\n\n        return (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* () {\n            try {\n                const data = yield _this.client.getVersion(\"_latest\");\n                return {\n                    version: data.name\n                };\n            } catch (e) {\n                if (\"response\" in e && e.response.statusCode === 404) {\n                    throw new Error(`No latest version, please ensure that user, package and repository correctly configured. Or at least one version is published. ${e.stack || e.message}`);\n                }\n                throw e;\n            }\n        })();\n    }\n    getUpdateFile(versionInfo) {\n        var _this2 = this;\n\n        return (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* () {\n            try {\n                const files = yield _this2.client.getVersionFiles(versionInfo.version);\n                const suffix = `${versionInfo.version}.exe`;\n                const file = files.find(function (it) {\n                    return it.name.endsWith(suffix) && it.name.indexOf(\"Setup\") !== -1;\n                }) || files.find(function (it) {\n                    return it.name.endsWith(suffix);\n                }) || files.find(function (it) {\n                    return it.name.endsWith(\".exe\");\n                });\n                if (file == null) {\n                    //noinspection ExceptionCaughtLocallyJS\n                    throw new Error(`Cannot find suitable file for version ${versionInfo.version} in: ${JSON.stringify(files, null, 2)}`);\n                }\n                return {\n                    name: file.name,\n                    url: `https://dl.bintray.com/${_this2.client.owner}/${_this2.client.repo}/${file.name}`,\n                    sha2: file.sha256\n                };\n            } catch (e) {\n                if (e instanceof (_electronBuilderHttp || _load_electronBuilderHttp()).HttpError && e.response.statusCode === 404) {\n                    throw new Error(`No latest version, please ensure that user, package and repository correctly configured. Or at least one version is published. ${e.stack || e.message}`);\n                }\n                throw e;\n            }\n        })();\n    }\n}\nexports.BintrayProvider = BintrayProvider; //# sourceMappingURL=BintrayProvider.js.map","/home/travis/build/npmtest/node-npmtest-electron-updater/node_modules/electron-updater/out/electronHttpExecutor.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.ElectronHttpExecutor = exports.NET_SESSION_NAME = undefined;\n\nvar _bluebirdLst;\n\nfunction _load_bluebirdLst() {\n    return _bluebirdLst = require(\"bluebird-lst\");\n}\n\nvar _debug2;\n\nfunction _load_debug() {\n    return _debug2 = _interopRequireDefault(require(\"debug\"));\n}\n\nvar _electron;\n\nfunction _load_electron() {\n    return _electron = require(\"electron\");\n}\n\nvar _electronBuilderHttp;\n\nfunction _load_electronBuilderHttp() {\n    return _electronBuilderHttp = require(\"electron-builder-http\");\n}\n\nvar _fsExtraP;\n\nfunction _load_fsExtraP() {\n    return _fsExtraP = require(\"fs-extra-p\");\n}\n\nvar _path = _interopRequireWildcard(require(\"path\"));\n\nvar _url;\n\nfunction _load_url() {\n    return _url = require(\"url\");\n}\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst NET_SESSION_NAME = exports.NET_SESSION_NAME = \"electron-updater\";\nconst debug = (0, (_debug2 || _load_debug()).default)(\"electron-builder\");\nclass ElectronHttpExecutor extends (_electronBuilderHttp || _load_electronBuilderHttp()).HttpExecutor {\n    download(url, destination, options) {\n        var _this = this;\n\n        return (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* () {\n            if (options == null || !options.skipDirCreation) {\n                yield (0, (_fsExtraP || _load_fsExtraP()).ensureDir)(_path.dirname(destination));\n            }\n            return yield options.cancellationToken.createPromise(function (resolve, reject, onCancel) {\n                const parsedUrl = (0, (_url || _load_url()).parse)(url);\n                _this.doDownload((0, (_electronBuilderHttp || _load_electronBuilderHttp()).configureRequestOptions)({\n                    protocol: parsedUrl.protocol,\n                    hostname: parsedUrl.hostname,\n                    path: parsedUrl.path,\n                    port: parsedUrl.port ? parseInt(parsedUrl.port, 10) : undefined,\n                    headers: options.headers || undefined\n                }), destination, 0, options, function (error) {\n                    if (error == null) {\n                        resolve(destination);\n                    } else {\n                        reject(error);\n                    }\n                }, onCancel);\n            });\n        })();\n    }\n    doApiRequest(options, cancellationToken, requestProcessor) {\n        let redirectCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n        if (debug.enabled) {\n            debug(`request: ${(0, (_electronBuilderHttp || _load_electronBuilderHttp()).dumpRequestOptions)(options)}`);\n        }\n        return cancellationToken.createPromise((resolve, reject, onCancel) => {\n            const request = (_electron || _load_electron()).net.request(options, response => {\n                try {\n                    this.handleResponse(response, options, cancellationToken, resolve, reject, redirectCount, requestProcessor);\n                } catch (e) {\n                    reject(e);\n                }\n            });\n            this.addTimeOutHandler(request, reject);\n            request.on(\"error\", reject);\n            requestProcessor(request, reject);\n            onCancel(() => request.abort());\n        });\n    }\n    doRequest(options, callback) {\n        options.session = (_electron || _load_electron()).session.fromPartition(NET_SESSION_NAME);\n        return (_electron || _load_electron()).net.request(options, callback);\n    }\n}\nexports.ElectronHttpExecutor = ElectronHttpExecutor; //# sourceMappingURL=electronHttpExecutor.js.map","/home/travis/build/npmtest/node-npmtest-electron-updater/node_modules/electron-updater/out/GenericProvider.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.GenericProvider = undefined;\n\nvar _bluebirdLst;\n\nfunction _load_bluebirdLst() {\n    return _bluebirdLst = require(\"bluebird-lst\");\n}\n\nexports.validateUpdateInfo = validateUpdateInfo;\n\nvar _api;\n\nfunction _load_api() {\n    return _api = require(\"./api\");\n}\n\nvar _url;\n\nfunction _load_url() {\n    return _url = _interopRequireWildcard(require(\"url\"));\n}\n\nvar _path = _interopRequireWildcard(require(\"path\"));\n\nvar _electronBuilderHttp;\n\nfunction _load_electronBuilderHttp() {\n    return _electronBuilderHttp = require(\"electron-builder-http\");\n}\n\nvar _CancellationToken;\n\nfunction _load_CancellationToken() {\n    return _CancellationToken = require(\"electron-builder-http/out/CancellationToken\");\n}\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nclass GenericProvider extends (_api || _load_api()).Provider {\n    constructor(configuration) {\n        super();\n        this.configuration = configuration;\n        this.baseUrl = (_url || _load_url()).parse(this.configuration.url);\n        this.channel = this.configuration.channel ? (0, (_api || _load_api()).getCustomChannelName)(this.configuration.channel) : (0, (_api || _load_api()).getDefaultChannelName)();\n    }\n    getLatestVersion() {\n        var _this = this;\n\n        return (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* () {\n            let result = null;\n            const channelFile = (0, (_api || _load_api()).getChannelFilename)(_this.channel);\n            const pathname = _path.posix.resolve(_this.baseUrl.pathname || \"/\", channelFile);\n            try {\n                const options = {\n                    hostname: _this.baseUrl.hostname,\n                    path: `${pathname}${_this.baseUrl.search || \"\"}`,\n                    protocol: _this.baseUrl.protocol,\n                    headers: _this.requestHeaders || undefined\n                };\n                if (_this.baseUrl.port != null) {\n                    options.port = parseInt(_this.baseUrl.port, 10);\n                }\n                result = yield (0, (_electronBuilderHttp || _load_electronBuilderHttp()).request)(options, new (_CancellationToken || _load_CancellationToken()).CancellationToken());\n            } catch (e) {\n                if (e instanceof (_electronBuilderHttp || _load_electronBuilderHttp()).HttpError && e.response.statusCode === 404) {\n                    throw new Error(`Cannot find channel \"${channelFile}\" update info: ${e.stack || e.message}`);\n                }\n                throw e;\n            }\n            validateUpdateInfo(result);\n            if ((0, (_api || _load_api()).getCurrentPlatform)() === \"darwin\") {\n                result.releaseJsonUrl = (_url || _load_url()).format(Object.assign({}, _this.baseUrl, { pathname: pathname }));\n            }\n            return result;\n        })();\n    }\n    getUpdateFile(versionInfo) {\n        var _this2 = this;\n\n        return (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* () {\n            if ((0, (_api || _load_api()).getCurrentPlatform)() === \"darwin\") {\n                return versionInfo;\n            }\n            return {\n                name: _path.posix.basename(versionInfo.path),\n                url: (_url || _load_url()).format(Object.assign({}, _this2.baseUrl, { pathname: _path.posix.resolve(_this2.baseUrl.pathname || \"/\", versionInfo.path) })),\n                sha2: versionInfo.sha2\n            };\n        })();\n    }\n}\nexports.GenericProvider = GenericProvider; // sha2 is required only for windows because on macOS update is verified by Squirrel.Mac\n\nfunction validateUpdateInfo(info) {\n    if ((0, (_api || _load_api()).getCurrentPlatform)() === \"darwin\") {\n        if (info.url == null) {\n            throw new Error(\"Update info doesn't contain url\");\n        }\n        return;\n    }\n    if (info.sha2 == null) {\n        throw new Error(`Update info doesn't contain sha2 checksum: ${JSON.stringify(info, null, 2)}`);\n    }\n    if (info.path == null) {\n        throw new Error(`Update info doesn't contain file path: ${JSON.stringify(info, null, 2)}`);\n    }\n}\n//# sourceMappingURL=GenericProvider.js.map","/home/travis/build/npmtest/node-npmtest-electron-updater/node_modules/electron-updater/out/GitHubProvider.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.GitHubProvider = exports.BaseGitHubProvider = undefined;\n\nvar _bluebirdLst;\n\nfunction _load_bluebirdLst() {\n    return _bluebirdLst = require(\"bluebird-lst\");\n}\n\nvar _electronBuilderHttp;\n\nfunction _load_electronBuilderHttp() {\n    return _electronBuilderHttp = require(\"electron-builder-http\");\n}\n\nvar _CancellationToken;\n\nfunction _load_CancellationToken() {\n    return _CancellationToken = require(\"electron-builder-http/out/CancellationToken\");\n}\n\nvar _publishOptions;\n\nfunction _load_publishOptions() {\n    return _publishOptions = require(\"electron-builder-http/out/publishOptions\");\n}\n\nvar _path = _interopRequireWildcard(require(\"path\"));\n\nvar _url;\n\nfunction _load_url() {\n    return _url = require(\"url\");\n}\n\nvar _api;\n\nfunction _load_api() {\n    return _api = require(\"./api\");\n}\n\nvar _GenericProvider;\n\nfunction _load_GenericProvider() {\n    return _GenericProvider = require(\"./GenericProvider\");\n}\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nclass BaseGitHubProvider extends (_api || _load_api()).Provider {\n    constructor(options, baseHost) {\n        super();\n        this.options = options;\n        const baseUrl = (0, (_url || _load_url()).parse)(`${options.protocol || \"https\"}://${options.host || baseHost}`);\n        this.baseUrl = {\n            protocol: baseUrl.protocol,\n            hostname: baseUrl.hostname,\n            port: baseUrl.port\n        };\n    }\n}\nexports.BaseGitHubProvider = BaseGitHubProvider;\nclass GitHubProvider extends BaseGitHubProvider {\n    constructor(options, updater) {\n        super(options, \"github.com\");\n        this.options = options;\n        this.updater = updater;\n    }\n    getLatestVersion() {\n        var _this = this;\n\n        return (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* () {\n            const basePath = _this.basePath;\n            const cancellationToken = new (_CancellationToken || _load_CancellationToken()).CancellationToken();\n            const xElement = require(\"xelement\");\n            const feedXml = yield (0, (_electronBuilderHttp || _load_electronBuilderHttp()).request)(Object.assign({\n                path: `${basePath}.atom`,\n                headers: Object.assign({}, _this.requestHeaders, { Accept: \"application/xml\" })\n            }, _this.baseUrl), cancellationToken);\n            const feed = new xElement.Parse(feedXml);\n            const latestRelease = feed.element(\"entry\");\n            if (latestRelease == null) {\n                throw new Error(`No published versions on GitHub`);\n            }\n            let version;\n            try {\n                if (_this.updater.allowPrerelease) {\n                    version = latestRelease.element(\"link\").getAttr(\"href\").match(/\\/tag\\/v?([^\\/]+)$/)[1];\n                } else {\n                    version = yield _this.getLatestVersionString(basePath, cancellationToken);\n                }\n            } catch (e) {\n                throw new Error(`Cannot parse releases feed: ${e.stack || e.message},\\nXML:\\n${feedXml}`);\n            }\n            let result;\n            const channelFile = (0, (_api || _load_api()).getChannelFilename)((0, (_api || _load_api()).getDefaultChannelName)());\n            const requestOptions = Object.assign({ path: _this.getBaseDownloadPath(version, channelFile), headers: _this.requestHeaders || undefined }, _this.baseUrl);\n            try {\n                result = yield (0, (_electronBuilderHttp || _load_electronBuilderHttp()).request)(requestOptions, cancellationToken);\n            } catch (e) {\n                if (!_this.updater.allowPrerelease) {\n                    if (e instanceof (_electronBuilderHttp || _load_electronBuilderHttp()).HttpError && e.response.statusCode === 404) {\n                        throw new Error(`Cannot find ${channelFile} in the latest release artifacts (${(0, (_api || _load_api()).formatUrl)(requestOptions)}): ${e.stack || e.message}`);\n                    }\n                }\n                throw e;\n            }\n            (0, (_GenericProvider || _load_GenericProvider()).validateUpdateInfo)(result);\n            if ((0, (_api || _load_api()).getCurrentPlatform)() === \"darwin\") {\n                result.releaseJsonUrl = `${(0, (_publishOptions || _load_publishOptions()).githubUrl)(_this.options)}/${requestOptions.path}`;\n            }\n            if (result.releaseName == null) {\n                result.releaseName = latestRelease.getElementValue(\"title\");\n            }\n            if (result.releaseNotes == null) {\n                result.releaseNotes = latestRelease.getElementValue(\"content\");\n            }\n            return result;\n        })();\n    }\n    getLatestVersionString(basePath, cancellationToken) {\n        var _this2 = this;\n\n        return (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* () {\n            const requestOptions = Object.assign({\n                path: `${basePath}/latest`,\n                headers: Object.assign({}, _this2.requestHeaders, { Accept: \"application/json\" })\n            }, _this2.baseUrl);\n            try {\n                // do not use API to avoid limit\n                const releaseInfo = yield (0, (_electronBuilderHttp || _load_electronBuilderHttp()).request)(requestOptions, cancellationToken);\n                return releaseInfo.tag_name.startsWith(\"v\") ? releaseInfo.tag_name.substring(1) : releaseInfo.tag_name;\n            } catch (e) {\n                throw new Error(`Unable to find latest version on GitHub (${(0, (_api || _load_api()).formatUrl)(requestOptions)}), please ensure a production release exists: ${e.stack || e.message}`);\n            }\n        })();\n    }\n    get basePath() {\n        return `/${this.options.owner}/${this.options.repo}/releases`;\n    }\n    getUpdateFile(versionInfo) {\n        var _this3 = this;\n\n        return (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* () {\n            if ((0, (_api || _load_api()).getCurrentPlatform)() === \"darwin\") {\n                return versionInfo;\n            }\n            // space is not supported on GitHub\n            const name = versionInfo.githubArtifactName || _path.posix.basename(versionInfo.path).replace(/ /g, \"-\");\n            return {\n                name: name,\n                url: (0, (_api || _load_api()).formatUrl)(Object.assign({ path: _this3.getBaseDownloadPath(versionInfo.version, name) }, _this3.baseUrl)),\n                sha2: versionInfo.sha2\n            };\n        })();\n    }\n    getBaseDownloadPath(version, fileName) {\n        return `${this.basePath}/download/${this.options.vPrefixedTagName === false ? \"\" : \"v\"}${version}/${fileName}`;\n    }\n}\nexports.GitHubProvider = GitHubProvider; //# sourceMappingURL=GitHubProvider.js.map","/home/travis/build/npmtest/node-npmtest-electron-updater/node_modules/electron-updater/out/MacUpdater.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.MacUpdater = undefined;\n\nvar _bluebirdLst;\n\nfunction _load_bluebirdLst() {\n    return _bluebirdLst = _interopRequireDefault(require(\"bluebird-lst\"));\n}\n\nvar _AppUpdater;\n\nfunction _load_AppUpdater() {\n    return _AppUpdater = require(\"./AppUpdater\");\n}\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass MacUpdater extends (_AppUpdater || _load_AppUpdater()).AppUpdater {\n    constructor(options) {\n        super(options);\n        this.nativeUpdater = require(\"electron\").autoUpdater;\n        this.nativeUpdater.on(\"error\", it => {\n            if (this.logger != null) {\n                this.logger.warn(it);\n            }\n            this.emit(\"error\", it);\n        });\n        this.nativeUpdater.on(\"update-downloaded\", () => {\n            if (this.logger != null) {\n                this.logger.info(`New version ${this.versionInfo.version} has been downloaded`);\n            }\n            this.emit(\"update-downloaded\", this.versionInfo);\n        });\n    }\n    onUpdateAvailable(versionInfo, fileInfo) {\n        this.nativeUpdater.setFeedURL(versionInfo.releaseJsonUrl, Object.assign({ \"Cache-Control\": \"no-cache\" }, this.computeRequestHeaders(fileInfo)));\n        super.onUpdateAvailable(versionInfo, fileInfo);\n    }\n    doDownloadUpdate(versionInfo, fileInfo, cancellationToken) {\n        this.nativeUpdater.checkForUpdates();\n        return (_bluebirdLst || _load_bluebirdLst()).default.resolve();\n    }\n    quitAndInstall() {\n        this.nativeUpdater.quitAndInstall();\n    }\n}\nexports.MacUpdater = MacUpdater; //# sourceMappingURL=MacUpdater.js.map","/home/travis/build/npmtest/node-npmtest-electron-updater/node_modules/electron-updater/out/NsisUpdater.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.NsisUpdater = undefined;\n\nvar _bluebirdLst;\n\nfunction _load_bluebirdLst() {\n    return _bluebirdLst = require(\"bluebird-lst\");\n}\n\nvar _child_process;\n\nfunction _load_child_process() {\n    return _child_process = require(\"child_process\");\n}\n\nvar _electronBuilderHttp;\n\nfunction _load_electronBuilderHttp() {\n    return _electronBuilderHttp = require(\"electron-builder-http\");\n}\n\nvar _CancellationToken;\n\nfunction _load_CancellationToken() {\n    return _CancellationToken = require(\"electron-builder-http/out/CancellationToken\");\n}\n\nvar _fsExtraP;\n\nfunction _load_fsExtraP() {\n    return _fsExtraP = require(\"fs-extra-p\");\n}\n\nvar _os;\n\nfunction _load_os() {\n    return _os = require(\"os\");\n}\n\nvar _path = _interopRequireWildcard(require(\"path\"));\n\nrequire(\"source-map-support/register\");\n\nvar _api;\n\nfunction _load_api() {\n    return _api = require(\"./api\");\n}\n\nvar _AppUpdater;\n\nfunction _load_AppUpdater() {\n    return _AppUpdater = require(\"./AppUpdater\");\n}\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nclass NsisUpdater extends (_AppUpdater || _load_AppUpdater()).AppUpdater {\n    constructor(options, app) {\n        super(options, app);\n        this.quitAndInstallCalled = false;\n        this.quitHandlerAdded = false;\n    }\n    /**\n     * Start downloading update manually. You can use this method if `autoDownload` option is set to `false`.\n     * @returns {Promise<string>} Path to downloaded file.\n     */\n    doDownloadUpdate(versionInfo, fileInfo, cancellationToken) {\n        var _this = this;\n\n        return (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* () {\n            const downloadOptions = {\n                skipDirCreation: true,\n                headers: _this.computeRequestHeaders(fileInfo),\n                cancellationToken: cancellationToken,\n                sha2: fileInfo == null ? null : fileInfo.sha2\n            };\n            if (_this.listenerCount((_api || _load_api()).DOWNLOAD_PROGRESS) > 0) {\n                downloadOptions.onProgress = function (it) {\n                    return _this.emit((_api || _load_api()).DOWNLOAD_PROGRESS, it);\n                };\n            }\n            const logger = _this.logger;\n            const tempDir = yield (0, (_fsExtraP || _load_fsExtraP()).mkdtemp)(`${_path.join((0, (_os || _load_os()).tmpdir)(), \"up\")}-`);\n            const tempFile = _path.join(tempDir, fileInfo.name);\n            try {\n                yield (0, (_electronBuilderHttp || _load_electronBuilderHttp()).download)(fileInfo.url, tempFile, downloadOptions);\n            } catch (e) {\n                try {\n                    yield (0, (_fsExtraP || _load_fsExtraP()).remove)(tempDir);\n                } catch (ignored) {\n                    // ignored\n                }\n                if (e instanceof (_CancellationToken || _load_CancellationToken()).CancellationError) {\n                    _this.emit(\"update-cancelled\", _this.versionInfo);\n                    if (logger != null) {\n                        logger.info(\"Cancelled\");\n                    }\n                }\n                throw e;\n            }\n            if (logger != null) {\n                logger.info(`New version ${_this.versionInfo.version} has been downloaded to ${tempFile}`);\n            }\n            _this.setupPath = tempFile;\n            _this.addQuitHandler();\n            _this.emit(\"update-downloaded\", _this.versionInfo);\n            return tempFile;\n        })();\n    }\n    addQuitHandler() {\n        if (this.quitHandlerAdded) {\n            return;\n        }\n        this.quitHandlerAdded = true;\n        this.app.on(\"quit\", () => {\n            if (this.logger != null) {\n                this.logger.info(\"Auto install update on quit\");\n            }\n            this.install(true);\n        });\n    }\n    quitAndInstall() {\n        if (this.install(false)) {\n            this.app.quit();\n        }\n    }\n    install(isSilent) {\n        if (this.quitAndInstallCalled) {\n            return false;\n        }\n        const setupPath = this.setupPath;\n        if (!this.updateAvailable || setupPath == null) {\n            const message = \"No update available, can't quit and install\";\n            this.emit(\"error\", new Error(message), message);\n            return false;\n        }\n        // prevent calling several times\n        this.quitAndInstallCalled = true;\n        const args = [\"--updated\"];\n        if (isSilent) {\n            args.push(\"/S\");\n        }\n        const spawnOptions = {\n            detached: true,\n            stdio: \"ignore\"\n        };\n        try {\n            (0, (_child_process || _load_child_process()).spawn)(setupPath, args, spawnOptions).unref();\n        } catch (e) {\n            // yes, such errors dispatched not as error event\n            // https://github.com/electron-userland/electron-builder/issues/1129\n            if (e.code === \"UNKNOWN\") {\n                if (this.logger != null) {\n                    this.logger.info(\"UNKNOWN error code on spawn, will be executed again using elevate\");\n                }\n                try {\n                    (0, (_child_process || _load_child_process()).spawn)(_path.join(process.resourcesPath, \"elevate.exe\"), [setupPath].concat(args), spawnOptions).unref();\n                } catch (e) {\n                    this.dispatchError(e);\n                }\n            } else {\n                this.dispatchError(e);\n            }\n        }\n        return true;\n    }\n}\nexports.NsisUpdater = NsisUpdater; //# sourceMappingURL=NsisUpdater.js.map","/home/travis/build/npmtest/node-npmtest-electron-updater/node_modules/electron-updater/out/PrivateGitHubProvider.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.PrivateGitHubProvider = undefined;\n\nvar _bluebirdLst;\n\nfunction _load_bluebirdLst() {\n    return _bluebirdLst = require(\"bluebird-lst\");\n}\n\nvar _electron;\n\nfunction _load_electron() {\n    return _electron = require(\"electron\");\n}\n\nvar _electronBuilderHttp;\n\nfunction _load_electronBuilderHttp() {\n    return _electronBuilderHttp = require(\"electron-builder-http\");\n}\n\nvar _CancellationToken;\n\nfunction _load_CancellationToken() {\n    return _CancellationToken = require(\"electron-builder-http/out/CancellationToken\");\n}\n\nvar _jsYaml;\n\nfunction _load_jsYaml() {\n    return _jsYaml = require(\"js-yaml\");\n}\n\nvar _path = _interopRequireWildcard(require(\"path\"));\n\nvar _url;\n\nfunction _load_url() {\n    return _url = require(\"url\");\n}\n\nvar _api;\n\nfunction _load_api() {\n    return _api = require(\"./api\");\n}\n\nvar _electronHttpExecutor;\n\nfunction _load_electronHttpExecutor() {\n    return _electronHttpExecutor = require(\"./electronHttpExecutor\");\n}\n\nvar _GenericProvider;\n\nfunction _load_GenericProvider() {\n    return _GenericProvider = require(\"./GenericProvider\");\n}\n\nvar _GitHubProvider;\n\nfunction _load_GitHubProvider() {\n    return _GitHubProvider = require(\"./GitHubProvider\");\n}\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nclass PrivateGitHubProvider extends (_GitHubProvider || _load_GitHubProvider()).BaseGitHubProvider {\n    constructor(options, token) {\n        super(options, \"api.github.com\");\n        this.token = token;\n        this.netSession = (_electron || _load_electron()).session.fromPartition((_electronHttpExecutor || _load_electronHttpExecutor()).NET_SESSION_NAME);\n        this.registerHeaderRemovalListener();\n    }\n    getLatestVersion() {\n        var _this = this;\n\n        return (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* () {\n            const basePath = _this.basePath;\n            const cancellationToken = new (_CancellationToken || _load_CancellationToken()).CancellationToken();\n            const channelFile = (0, (_api || _load_api()).getChannelFilename)((0, (_api || _load_api()).getDefaultChannelName)());\n            const assets = yield _this.getLatestVersionInfo(basePath, cancellationToken);\n            const requestOptions = Object.assign({\n                headers: _this.configureHeaders(\"application/octet-stream\"),\n                session: _this.netSession\n            }, (0, (_url || _load_url()).parse)(assets.find(function (it) {\n                return it.name == channelFile;\n            }).url));\n            let result;\n            try {\n                result = yield (0, (_electronBuilderHttp || _load_electronBuilderHttp()).request)(requestOptions, cancellationToken);\n                if (typeof result === \"string\") {\n                    if ((0, (_api || _load_api()).getCurrentPlatform)() === \"darwin\") {\n                        result = JSON.parse(result);\n                    } else {\n                        result = (0, (_jsYaml || _load_jsYaml()).safeLoad)(result);\n                    }\n                }\n            } catch (e) {\n                if (e instanceof (_electronBuilderHttp || _load_electronBuilderHttp()).HttpError && e.response.statusCode === 404) {\n                    throw new Error(`Cannot find ${channelFile} in the latest release artifacts (${(0, (_api || _load_api()).formatUrl)(requestOptions)}): ${e.stack || e.message}`);\n                }\n                throw e;\n            }\n            (0, (_GenericProvider || _load_GenericProvider()).validateUpdateInfo)(result);\n            if ((0, (_api || _load_api()).getCurrentPlatform)() === \"darwin\") {\n                result.releaseJsonUrl = `${_this.options.protocol || \"https\"}://${_this.options.host || \"api.github.com\"}${requestOptions.path}`;\n            }\n            result.assets = assets;\n            return result;\n        })();\n    }\n    registerHeaderRemovalListener() {\n        const filter = {\n            urls: [\"*://*.amazonaws.com/*\"]\n        };\n        this.netSession.webRequest.onBeforeSendHeaders(filter, (details, callback) => {\n            if (details.requestHeaders.Authorization != null) {\n                delete details.requestHeaders.Authorization;\n            }\n            callback({ cancel: false, requestHeaders: details.requestHeaders });\n        });\n    }\n    configureHeaders(accept) {\n        return Object.assign({\n            Accept: accept,\n            Authorization: `token ${this.token}`\n        }, this.requestHeaders);\n    }\n    getLatestVersionInfo(basePath, cancellationToken) {\n        var _this2 = this;\n\n        return (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* () {\n            const requestOptions = Object.assign({\n                path: `${basePath}/latest`,\n                headers: _this2.configureHeaders(\"application/vnd.github.v3+json\")\n            }, _this2.baseUrl);\n            try {\n                return (yield (0, (_electronBuilderHttp || _load_electronBuilderHttp()).request)(requestOptions, cancellationToken)).assets;\n            } catch (e) {\n                throw new Error(`Unable to find latest version on GitHub (${(0, (_api || _load_api()).formatUrl)(requestOptions)}), please ensure a production release exists: ${e.stack || e.message}`);\n            }\n        })();\n    }\n    get basePath() {\n        return `/repos/${this.options.owner}/${this.options.repo}/releases`;\n    }\n    getUpdateFile(versionInfo) {\n        var _this3 = this;\n\n        return (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* () {\n            const headers = {\n                Accept: \"application/octet-stream\",\n                Authorization: `token ${_this3.token}`\n            };\n            // space is not supported on GitHub\n            if ((0, (_api || _load_api()).getCurrentPlatform)() === \"darwin\") {\n                const info = versionInfo;\n                const name = info.url.split(\"/\").pop();\n                const assetPath = (0, (_url || _load_url()).parse)(versionInfo.assets.find(function (it) {\n                    return it.name == name;\n                }).url).path;\n                info.url = (0, (_api || _load_api()).formatUrl)(Object.assign({ path: `${assetPath}` }, _this3.baseUrl));\n                info.headers = headers;\n                return info;\n            } else {\n                const name = versionInfo.githubArtifactName || _path.posix.basename(versionInfo.path).replace(/ /g, \"-\");\n                return {\n                    name: name,\n                    url: versionInfo.assets.find(function (it) {\n                        return it.name == name;\n                    }).url,\n                    sha2: versionInfo.sha2,\n                    headers: headers,\n                    session: _this3.netSession\n                };\n            }\n        })();\n    }\n}\nexports.PrivateGitHubProvider = PrivateGitHubProvider; //# sourceMappingURL=PrivateGitHubProvider.js.map"}